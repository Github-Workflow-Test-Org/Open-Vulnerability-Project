package io.github.jeremylong.openvulnerability;

import liquibase.Liquibase;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.exception.LiquibaseException;
import liquibase.resource.ClassLoaderResourceAccessor;
import liquibase.resource.ResourceAccessor;
import org.hibernate.JDBCException;

import java.sql.Connection;
import java.sql.SQLException;

public class DatabaseManager {

    public DatabaseManager() {
        ResourceAccessor accessor = new ClassLoaderResourceAccessor()
        DatabaseFactory databaseFactory = DatabaseFactory.getInstance();
        Database database = null;

        try {
            database =
                    databaseFactory.findCorrectDatabaseImplementation(connect());
        } catch (JDBCException e) {
            e.printStackTrace();
        }

        Liquibase liquibase = new Liquibase("db.changelog.xml", accessor,
                database);

        try {
            liquibase.update("");
        } catch (LiquibaseException e) {
            e.printStackTrace();
        }
    }

    private static Connection connect() {
        Connection conn = null;
        try {
            Class.forName("oracle.jdbc.OracleDriver").newInstance();
        } catch (Exception e) {
            System.out.println("\nCould not find database driver...");
        }

        try {
            conn = java.sql.DriverManager.getConnection(connectionUrl, user,
                    pass);
        } catch (SQLException e) {
            System.out.println("\nCould not connect to the database...");
        } finally {
            System.out.println("\nSuccesfully connected to the database...");
        }
        return conn;
    }
}
