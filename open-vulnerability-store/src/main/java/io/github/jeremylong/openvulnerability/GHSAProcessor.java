/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import io.github.jeremylong.openvulnerability.client.ghsa.SecurityAdvisory;
import io.github.jeremylong.openvulnerability.model.Affected;
import io.github.jeremylong.openvulnerability.model.Vulnerability;

import java.util.Collection;
import java.util.List;

public class GHSAProcessor implements Runnable {
    private Collection<SecurityAdvisory> advisories;
    private DatabaseManager databaseManager;

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public GHSAProcessor(DatabaseManager databaseManager, Collection<SecurityAdvisory> advisories) {
        this.advisories = advisories;
        this.databaseManager = databaseManager;
    }

    @Override
    public void run() {
        try (VulnerabilityDatabase database = databaseManager.getDatabase()) {
            for (SecurityAdvisory entry : advisories) {
                // TODO - also search for CVEs on the advisory (or other datasources once added) - if we have one
                // from GHSA we trust it more
                List<Vulnerability> existingVulnerabilities = database.getVulnerability(entry.getGhsaId());
                // updating is hard... as removing a single version or affected entry in a list of entries is
                // difficult once data is coming from multiple data sources. We treat GHSA as the most
                // accurate.
                if (existingVulnerabilities != null && !existingVulnerabilities.isEmpty()) {
                    for (Vulnerability v : existingVulnerabilities) {
                        database.delete(v);
                    }
                }
                Vulnerability newVuln = VulnerabilityTransformer.from(entry);
                // transfer any affected with CPE entries from the existing vulns to the new vuln
                if (existingVulnerabilities != null && !existingVulnerabilities.isEmpty()) {
                    for (Vulnerability v : existingVulnerabilities) {
                        if (v.getAffected() != null && !v.getAffected().isEmpty()) {
                            for (Affected a : v.getAffected()) {
                                if (a.getCpe() != null && !a.getCpe().isBlank()) {
                                    newVuln.addAffected(a);
                                }
                            }
                        }
                    }
                }
                database.store(newVuln);
                // count += 1;
                // LOG.info("Processing {}/{}", count, api.getTotalAvailable());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
