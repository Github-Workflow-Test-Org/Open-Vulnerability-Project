/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import io.github.jeremylong.openvulnerability.model.EpssScore;
import io.github.jeremylong.openvulnerability.model.KevEntry;
import io.github.jeremylong.openvulnerability.model.Property;
import io.github.jeremylong.openvulnerability.model.Vulnerability;
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockModeType;
import jakarta.persistence.Query;
import jakarta.persistence.TypedQuery;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

public class VulnerabilityDatabase implements AutoCloseable {
    private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityDatabase.class);

    private final static String VULNERABILITY_BY_ID = "SELECT V FROM Vulnerability V INNER JOIN V.identifiers I WHERE I = :identifier";

    private EntityManager session;
    private long transactionCount = 0;

    private TypedQuery<Vulnerability> queryVulnerabilityById;

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public VulnerabilityDatabase(EntityManager session) {
        this.session = session;
        this.session.getTransaction().begin();
        queryVulnerabilityById = session.createQuery(VULNERABILITY_BY_ID, Vulnerability.class);
    }

    public void truncateEPSS() {
        truncate("EpssScore");
    }

    public void truncateKEV() {
        truncate("KevEntry");
    }

    private void truncate(String myTable) {
        String hql = String.format("DELETE FROM %s", myTable);
        Query query = session.createQuery(hql);
        query.executeUpdate();
    }

    public void store(KevEntry entry) {
        session.persist(entry);
    }

    public void store(EpssScore score) {
        session.persist(score);
    }

    public void store(Vulnerability vulnerability) {
        session.persist(vulnerability);
    }

    public List<Vulnerability> getVulnerability(String identifier) {
        queryVulnerabilityById.setParameter("identifier", identifier);
        return queryVulnerabilityById.getResultList();
    }

    public void delete(Vulnerability v) {
        session.remove(v);
    }

    public void store(Property property) {
        session.persist(property);
    }

    public Property getProperty(String key) {
        return session.find(Property.class, key, LockModeType.NONE);
    }

    @Override
    public void close() throws Exception {
        session.flush();
        session.getTransaction().commit();
        session.close();
    }
}
