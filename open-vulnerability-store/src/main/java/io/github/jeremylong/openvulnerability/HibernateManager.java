/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability;

import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class HibernateManager implements AutoCloseable {
    private static final Logger LOG = LoggerFactory.getLogger(HibernateManager.class);
    private EntityManagerFactory entityManagerFactory;

    public HibernateManager() {
        this(new HashMap<String, String>());
    }

    public HibernateManager(Map<String, String> persistenceMap) {
        ensureDataDirectory(persistenceMap);
        entityManagerFactory = Persistence.createEntityManagerFactory("open-vunerability-data", persistenceMap);
    }

    public VulnerabilityDatabase getDatabase() {
        return new VulnerabilityDatabase(entityManagerFactory.createEntityManager());
    }

    /**
     * Attempts to extract the path from the persistence properties map ("javax.persistence.jdbc.url") and ensures that
     * the path exists.
     *
     * @param persistenceMap the persistence property map
     */
    private void ensureDataDirectory(Map<String, String> persistenceMap) {
        try {
            // TODO make this sqlite and h2 specific - check for semicolon as a path separator
            if (persistenceMap.containsKey("javax.persistence.jdbc.url")) {
                String path = persistenceMap.get("javax.persistence.jdbc.url");
                path = path.substring(path.indexOf(":", 5) + 1);
                File file = new File(path);
                if (!file.getParentFile().isDirectory() && !file.getParentFile().mkdirs()) {
                    LOG.debug("Unable to create data directory {}", file.getParentFile());
                }
            } else {
                Files.createDirectories(Paths.get("./data"));
            }
        } catch (IOException e) {
            // ignore for now
        }
    }

    @Override
    public void close() throws Exception {
        entityManagerFactory.close();
    }
}
