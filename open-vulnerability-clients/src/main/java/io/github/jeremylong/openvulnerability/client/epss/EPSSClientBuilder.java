/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2022-2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.epss;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Date;

/**
 * Used to build an GitHub SecurityAdvisory GraphQL API client. As the EPSSClient client is
 * autoclosable the builder should be used in a try with resources:
 *
 * <pre>
 * try (EPSSClient api = EPSSClientBuilder.aGitHubSecurityAdvisoryClient()
 *         .withApiKey(githubToken).build()) {
 *     while (api.hasNext()) {
 *         Collection&lt;SecurityAdvisory&gt; items = api.next();
 *     }
 * }
 * </pre>
 */
public final class EPSSClientBuilder {

    /**
     * Reference to the logger.
     */
    private static final Logger LOG = LoggerFactory.getLogger(EPSSClientBuilder.class);

    /**
     * The endpoint for the EPSS API.
     */
    private String endpoint;
    /**
     * Filters by EPSS CVE ID. Multiple values are supported separated by commas. The maximum size accepted for this parameter is 2000 characters (including commas).
     */
    private String cve;
    /**
     * Date in the format YYYY-MM-DD (since April 14, 2021), shows the historic values for epss and percentile attributes.
     */
    private Date date;
    /**
     * Number of days since the EPSS score was added to the database (starting at 1, not affected by the date parameter).
     */
    private Integer days;
    /**
     * Only display CVEs with EPSS score greater or equal than the parameter.
     */
    private Double epssGt;
    /**
     * Only display CVEs with percentile greater or equal than the parameter.
     */
    private Double percentileGt;
    /**
     * Only display CVEs with EPSS score lower or equal than the parameter.
     */
    private Double epssLt;
    /**
     * Only display CVEs with percentile lower or equal than the parameter.
     */
    private Double percentileLt;
    /**
     * string	Free text search at the CVE ID (allows partial matches).
     */
    private String q;
    /**
     * The number of records to return from the EPSS API.
     */
    private Integer limit;
    /**
     * Private constructor for a builder.
     */
    private EPSSClientBuilder() {
    }

    /**
     * Begin building the EPSSClient.
     *
     * @return the builder
     */
    public static EPSSClientBuilder aEPSSClient() {
        return new EPSSClientBuilder();
    }

    /**
     * Use an alternative endpoint for the EPSS API.
     *
     * @param endpoint the endpoint for the EPSS API
     * @return the builder
     */
    public EPSSClientBuilder withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    public EPSSClientBuilder withCve(String cve) {
        this.cve = cve;
        return this;
    }

    public EPSSClientBuilder withDate(Date date) {
        this.date = date;
        return this;
    }

    public EPSSClientBuilder withDays(Integer days) {
        this.days = days;
        return this;
    }

    public EPSSClientBuilder withEpssGt(Double epssGt) {
        this.epssGt = epssGt;
        return this;
    }

    public EPSSClientBuilder withPercentileGt(Double percentileGt) {
        this.percentileGt = percentileGt;
        return this;
    }

    public EPSSClientBuilder withEpssLt(Double epssLt) {
        this.epssLt = epssLt;
        return this;
    }

    public EPSSClientBuilder withPercentileLt(Double percentileLt) {
        this.percentileLt = percentileLt;
        return this;
    }

    public EPSSClientBuilder withQ(String q) {
        this.q = q;
        return this;
    }
    public EPSSClientBuilder withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    /**
     * Build the EPSS API client.
     *
     * @return the EPSS API client
     */
    public EPSSClient build() {
        EPSSClient client;
        if (endpoint == null) {
            client = new EPSSClient();
        } else {
            client = new EPSSClient(endpoint);
        }

        if (cve != null) {
            client.setFilterCve(cve);
        }
        if (date != null) {
            client.setFilterDate(date);
        }
        if (days != null) {
            client.setFilterDays(days);
        }
        if (epssGt != null) {
            client.setFilterEpssGt(epssGt);
        }
        if (percentileGt != null) {
            client.setFilterPercentileGt(percentileGt);
        }
        if (epssLt != null) {
            client.setFilterEpssLt(epssLt);
        }
        if (percentileLt != null) {
            client.setFilterPercentileLt(percentileLt);
        }
        if (q != null) {
            client.setFilterQ(q);
        }
        return client;
    }
}
