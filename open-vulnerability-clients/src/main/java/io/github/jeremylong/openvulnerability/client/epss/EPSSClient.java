/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.epss;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import io.github.jeremylong.openvulnerability.client.AbstractClient;
import io.github.jeremylong.openvulnerability.client.PagedDataSource;
import io.github.jeremylong.openvulnerability.client.SimpleFutureResponse;
import io.github.jeremylong.openvulnerability.client.ghsa.SecurityAdvisories;
import io.github.jeremylong.openvulnerability.client.ghsa.SecurityAdvisory;
import org.apache.hc.client5.http.async.methods.SimpleHttpRequest;
import org.apache.hc.client5.http.async.methods.SimpleHttpResponse;
import org.apache.hc.client5.http.async.methods.SimpleRequestBuilder;
import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;
import org.apache.hc.core5.http.ContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.StandardCharsets;
import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public class EPSSClient extends AbstractClient implements PagedDataSource<SecurityAdvisory> {

    public static final String EPSS_ENDPOINT = "https://api.first.org/data/v1/epss";
    /**
     * Reference to the logger.
     */
    private static final Logger LOG = LoggerFactory.getLogger(EPSSClient.class);
    /**
     * HTTP Client to access the API.
     */
    private final CloseableHttpAsyncClient httpClient;
    /**
     * Jackson JSON object mapper.
     */
    private final ObjectMapper objectMapper;
    /**
     * Has the first HTTP call been made?
     */
    private boolean firstCall = true;
    /**
     * The last HTTP status code received.
     */
    private int lastStatusCode = 200;
    /**
     * The total count of advisories retrieved.
     */
    private int totalCount = 0;
    /**
     * The number of available entries; only available after the first call to `next()`.
     */
    private int totalAvailable = -1;
    /**
     * Asynchronous future HTTP Response.
     */
    private Future<SimpleHttpResponse> futureResponse;
    /**
     * The EPSS endpoint.
     */
    private String endpoint;
    /**
     * Filters by EPSS CVE ID. Multiple values are supported separated by commas. The maximum size accepted for this parameter is 2000 characters (including commas).
     */
    private String cve;
    /**
     * Date in the format YYYY-MM-DD (since April 14, 2021), shows the historic values for epss and percentile attributes.
     */
    private Date date;
    /**
     * Number of days since the EPSS score was added to the database (starting at 1, not affected by the date parameter).
     */
    private Integer days;
    /**
     * Only display CVEs with EPSS score greater or equal than the parameter.
     */
    private Double epssGt;
    /**
     * Only display CVEs with percentile greater or equal than the parameter.
     */
    private Double percentileGt;
    /**
     * Only display CVEs with EPSS score lower or equal than the parameter.
     */
    private Double epssLt;
    /**
     * Only display CVEs with percentile lower or equal than the parameter.
     */
    private Double percentileLt;
    /**
     * string	Free text search at the CVE ID (allows partial matches).
     */
    private String q;
    /**
     * The number of records to return from the EPSS API.
     */
    private Integer limit;

    /**
     * The last updated date time value retrieved.
     */
    private ZonedDateTime lastUpdated;

    /**
     * Constructs a new client.
     */
    public EPSSClient() {
        this(EPSS_ENDPOINT);
    }

    /**
     * Constructs a new client.
     *
     * @param endpoint the EPSS endpoint
     */
    public EPSSClient(String endpoint) {
        this.endpoint = endpoint;
        httpClient = getHttpAsyncClient();
        httpClient.start();
        objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
    }

    void setFilterCve(String cve) {
        this.cve = cve;
    }

    void setFilterDate(Date date) {
        this.date = date;
    }

    void setFilterDays(Integer days) {
        this.days = days;
    }

    void setFilterEpssGt(Double epssGt) {
        this.epssGt = epssGt;
    }

    void setFilterPercentileGt(Double percentileGt) {
        this.percentileGt = percentileGt;
    }

    void setFilterEpssLt(Double epssLt) {
        this.epssLt = epssLt;
    }

    void setFilterPercentileLt(Double percentileLt) {
        this.percentileLt = percentileLt;
    }

    void setFilterQ(String q) {
        this.q = q;
    }

    /**
     * Internal API to query the endpoint.
     *
     * @param offset the offset to request
     * @return the Asynchronous HTTP Response.
     */
    private Future<SimpleHttpResponse> query(int offset) {
        String url = buildQueryString(offset);

        SimpleRequestBuilder builder = SimpleRequestBuilder.post(endpoint);
        builder.addHeader("User-Agent", "open-vulnerability-project");
        builder.addHeader("Accept-Encoding", "compress, gzip");
        builder.setBody(query, ContentType.APPLICATION_JSON);
        final SimpleHttpRequest request = builder.build();
        return httpClient.execute(request, new SimpleFutureResponse());
    }

    private String buildQueryString(int offset) {
        https://api.first.org/data/v1/epss?envelope=true&pretty=true&limit=2000&sort=date,cve&fields=date,cve
        limit
                offset
        envelope
                sort
    }

    /**
     * Cleanup allocated resources.
     *
     * @throws Exception thrown if there is a problem.
     */
    @Override
    public void close() throws Exception {
        httpClient.close();
    }

    /**
     * The number of available entries; only available after the first call to `next()`.
     *
     * @return the number of available entries
     */
    @Override
    public int getTotalAvailable() {
        return totalAvailable;
    }

    /**
     * Returns the last HTTP Status Code received.
     *
     * @return the last HTTP Status Code received.
     */
    public int getLastStatusCode() {
        return lastStatusCode;
    }

    private String

    /**
     * Returns <code>true</code> if there are more records available; otherwise <code>false</code>.
     *
     * @return <code>true</code> if there are more records available; otherwise <code>false</code>.
     */
    @Override

    public boolean hasNext() {
        if (lastStatusCode != 200) {
            return false;
        }
        return firstCall || futureResponse != null;
    }

    /**
     * Returns the next list of security advisories. Note that even if `hasNext()` returns true it is possible that
     * `next()` will return null. This will generally only occur on the very first call.
     *
     * @return a list of security advisories.
     */
    @Override
    public Collection<SecurityAdvisory> next() {
        try {
            Map<String, String> data = buildGraphQLData();
            // after should be the endCursor of the previous request - leave out for the first request
            // data.put("after","asdfadfasdfasfawefqwe");
            if (firstCall) {
                firstCall = false;
                futureResponse = query(advistoriesTemplate.execute(data));
            }
            SimpleHttpResponse response = null;
            response = futureResponse.get();
            if (response.getCode() == 200) {
                String body = response.getBodyText();
                if (body == null) {
                    body = new String(response.getBodyBytes(), StandardCharsets.UTF_8);
                }
                SecurityAdvisories results = objectMapper.readValue(body, SecurityAdvisories.class);
                List<SecurityAdvisory> list = results.getSecurityAdvisories();
                totalCount += list.size();
                totalAvailable = results.getTotalCount();
                if (results.getPageInfo().isHasNextPage() || totalCount < totalAvailable) {
                    data.put("after", results.getPageInfo().getEndCursor());
                    futureResponse = query(advistoriesTemplate.execute(data));
                } else {
                    futureResponse = null;
                }

                ensureSubPages(list);

                lastUpdated = findLastUpdated(lastUpdated, list);

                return list;
            } else {
                lastStatusCode = response.getCode();
                String error = new String(response.getBodyBytes(), StandardCharsets.UTF_8);
                LOG.error(error);
                throw new EPSSException("GitHub GraphQL Returned Status Code: " + lastStatusCode);
            }
        } catch (InterruptedException e) {
            Thread.interrupted();
            LOG.debug("Interrupted", e);
            throw new EPSSException(e);
        } catch (ExecutionException | JsonProcessingException e) {
            LOG.debug(e.getMessage(), e);
            throw new EPSSException(e);
        }
    }

    private Map<String, String> buildGraphQLData() {
        Map<String, String> data = new HashMap<String, String>();
        if (updatedSinceFilter != null) {
            data.put("updatedSince", updatedSinceFilter);
        }
        if (publishedSinceFilter != null) {
            data.put("publishedSince", publishedSinceFilter);
        }
        return data;
    }

    /**
     * Returns the latest updated date.
     *
     * @return the lastest updated date
     */
    public ZonedDateTime getLastUpdated() {
        return lastUpdated;
    }

    /**
     * Retrieve the latest last updated date from the list of security advisories.
     *
     * @param lastUpdatedDate the last updated date.
     * @param list the list of security advisories.
     * @return the latest last updated date.
     */
    private ZonedDateTime findLastUpdated(ZonedDateTime lastUpdatedDate, List<SecurityAdvisory> list) {
        ZonedDateTime current = lastUpdatedDate;
        for (SecurityAdvisory adv : list) {
            if (current == null || current.compareTo(adv.getUpdatedAt()) < 0) {
                current = adv.getUpdatedAt();
            }
        }
        return current;
    }

}
